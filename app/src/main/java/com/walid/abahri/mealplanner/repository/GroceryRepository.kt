package com.walid.abahri.mealplanner.repository

import android.content.Context
import androidx.lifecycle.LiveData
import com.walid.abahri.mealplanner.DB.GroceryItem
import com.walid.abahri.mealplanner.DB.GroceryItemDao
import com.walid.abahri.mealplanner.util.UserManager
import kotlinx.coroutines.flow.Flow

/**
 * Repository class that provides data operations for Grocery Items
 */
class GroceryRepository(private val groceryDao: GroceryItemDao, private val context: Context) {
    private val userManager = UserManager.getInstance(context)
    
    // Get all grocery items as LiveData
    val allItems: LiveData<List<GroceryItem>> = groceryDao.getAllItems(userManager.getCurrentUserId())

    // Get all grocery items for a given user
    fun getAllItems(userId: Int): LiveData<List<GroceryItem>> {
        return groceryDao.getAllItems(userId)
    }
    
    /**
     * Insert a grocery item
     */
    suspend fun insertItem(item: GroceryItem) {
        val userId = userManager.getCurrentUserId()
        // Make sure the item is associated with the current user
        val itemWithUserId = item.copy(userId = userId)
        groceryDao.insertItem(itemWithUserId)
    }
    
    /**
     * Insert multiple grocery items at once
     */
    suspend fun insertItems(items: List<GroceryItem>) {
        val userId = userManager.getCurrentUserId()
        // Make sure all items are associated with the current user
        val itemsWithUserId = items.map { it.copy(userId = userId) }
        groceryDao.insertItems(itemsWithUserId)
    }
    
    /**
     * Update a grocery item
     */
    suspend fun updateItem(item: GroceryItem) {
        // Make sure we're only updating the current user's item
        // userId should already be set on the item, but ensure it matches the current user
        val userId = userManager.getCurrentUserId()
        if (item.userId == userId) {
            groceryDao.updateItem(item)
        }
    }
    
    /**
     * Update just the checked status of an item
     */
    suspend fun updateItemCheckedStatus(itemId: Int, isChecked: Boolean) {
        val userId = userManager.getCurrentUserId()
        groceryDao.updateItemCheckedStatus(itemId, userId, isChecked)
    }
    
    /**
     * Delete a grocery item
     */
    suspend fun deleteItem(item: GroceryItem) {
        // Only delete if it belongs to the current user
        val userId = userManager.getCurrentUserId()
        if (item.userId == userId) {
            groceryDao.deleteItem(item)
        }
    }
    
    /**
     * Clear all completed (checked) grocery items
     */
    suspend fun clearCompletedItems() {
        val userId = userManager.getCurrentUserId()
        groceryDao.deleteCheckedItems(userId)
    }
    
    /**
     * Clear all grocery items
     */
    suspend fun clearAllItems() {
        val userId = userManager.getCurrentUserId()
        groceryDao.deleteAllItems(userId)
    }

    // Additional methods for new functionality
    
    /**
     * Get all grocery items as Flow
     */
    fun getAllGroceryItems(): Flow<List<GroceryItem>> {
        val userId = userManager.getCurrentUserId()
        return groceryDao.getAllItemsFlow(userId)
    }

    /**
     * Get grocery items by name
     */
    fun getGroceryItemsByName(name: String): Flow<List<GroceryItem>> {
        val userId = userManager.getCurrentUserId()
        return groceryDao.getItemsByName(userId, name)
    }

    /**
     * Insert a grocery item (new method name for consistency)
     */
    suspend fun insertGroceryItem(item: GroceryItem) {
        insertItem(item)
    }

    /**
     * Update a grocery item (new method name for consistency)
     */
    suspend fun updateGroceryItem(item: GroceryItem) {
        updateItem(item)
    }

    /**
     * Delete a grocery item (new method name for consistency)
     */
    suspend fun deleteGroceryItem(item: GroceryItem) {
        deleteItem(item)
    }

    /**
     * Clear auto-generated items (items with recipeSourceId)
     */
    suspend fun clearAutoGeneratedItems() {
        val userId = userManager.getCurrentUserId()
        groceryDao.deleteAutoGeneratedItems(userId)
    }

    /**
     * Get grocery items by category
     */
    fun getGroceryItemsByCategory(category: String): Flow<List<GroceryItem>> {
        val userId = userManager.getCurrentUserId()
        return groceryDao.getItemsByCategory(userId, category)
    }
}
